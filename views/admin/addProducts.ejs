<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Products</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
    <link id="stylesheet" rel="stylesheet" href="/adminAssets/assets/css/addProduct.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="sidebar" id="sidebar">
                <div class="text-center mb-4">
                    <img src="/adminAssets/assets/images/main-logo.png" alt="Books Paradise" class="img-fluid">
                </div>
                <a href="/admin/dashboard">Dashboard</a>
                <a href="/admin/products">Products</a>
                <a href="/admin/users">Users</a>
                <a href="/admin/Orders">Orders</a>
                <a href="/admin/coupons">Coupons</a>
                <a href="/admin/category">Categories</a>
                <a href="/admin/logout">Log Out</a>
            </div>
            <div class="col-md-12">
                <div class="top-bar" id="top-bar">
                    <div class="d-flex align-items-center">
                        <span class="toggle-btn" id="toggle-btn"><i class="fas fa-bars fa-2x"></i></span>
                        <div class="search-bar">
                            <input type="text" class="form-control" placeholder="Search">
                        </div>
                    </div>
                    <div class="user-info d-flex align-items-center">
                        <span>Hi Admin</span>
                        <i class="fas fa-user-circle fa-2x ml-3"></i>
                    </div>
                </div>
                <div class="main-content" id="main-content">
                    <div class="header-content">
                        <h2>Add Products</h2>
                    </div>
                    <div class="row custom-row">
                        <div class="col-lg-8">
                            <div class="product-add-form">
                                <h5>Product Details</h5>
                                <form action="/admin/addProducts" method="POST" id="product-form" enctype="multipart/form-data">
                                    <label class="form-label">Product title</label>
                                    <input type="text" name="productName" class="form-control" placeholder="Product title">
                                    <label class="form-label">Full description</label>
                                    <textarea name="description" class="form-control" rows="5" placeholder="Full description"></textarea>
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Regular price</label>
                                            <input name="regularPrice" type="text" class="form-control" placeholder="Regular price">
                                        </div>
                                        <div class="col">
                                            <label class="form-label">Promotional Price</label>
                                            <input name="salePrice" type="text" class="form-control" placeholder="Promotional Price">
                                        </div>
                                        <div class="col">
                                            <label class="form-label">Category</label>
                                            <select name="category" class="form-control">
                                                <option value="">Select Category</option>
                                                <% for (let i=0; i < category.length; i++) { %>
                                                    <option value="<%= category[i].name %>">
                                                        <%= category[i].name %>
                                                    </option>
                                                <% } %>                                                
                                            </select>
                                        </div>
                                    </div>
                                    <label class="form-label">Language</label>
                                    <input name="language" type="text" class="form-control" placeholder="Language">
                                    <label class="form-label">Author title</label>
                                    <input name="authorTitle" type="text" class="form-control" placeholder="Author title">
                                    <label class="form-label">Author details</label>
                                    <input name="authorDetails" type="text" class="form-control" placeholder="Author details">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="number" class="form-control" placeholder="Quantity">
                                    <div class="product-form-bottom">

                                        <!-- input file for image upload but the button is display is set as none -->
                                        <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg" multiple class="d-none">
                        
                                        <!-- using the label the image is uploaded -->
                                        <label for="product-image-upload" class="btn btn-warning">
                                            <i class="fas fa-upload"></i> &nbsp; Choose Images
                                        </label>
                        
                                        <!-- the product preview will generate based on what we select -->
                                        <div id="product-image-preview"></div>
                        
                        
                                        <!-- the form submission and cancel buttons -->
                                        <div>
                                            <a href="/admin/product" class="btn btn-secondary">Cancel</a>
                                            <button class="btn btn-success" type="submit">Add Product</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <div id="cropper-modal">
                        <div id="cropper-container">
                            <img id="cropper-image">
                            <div id="cropper-buttons">
                                <button id="crop-cancel" class="btn btn-secondary">Cancel</button>
                                <button id="crop-confirm" class="btn btn-primary">Crop</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        document.getElementById('toggle-btn').addEventListener('click', function() {
            var sidebar = document.getElementById('sidebar');
            var topBar = document.getElementById('top-bar');
            var mainContent = document.getElementById('main-content');
            sidebar.classList.toggle('active');
            topBar.classList.toggle('active');
            mainContent.classList.toggle('active');
        });

        document.getElementById('product-form').addEventListener('submit', async function (e) {
            e.preventDefault(); // Prevent the default form submission
            const form = e.target;
            const formData = new FormData(form);

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.status === 'success') {
                    alert(result.message);
                    window.location.href = "/admin/products"; // Redirect after alert
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while adding the product.');
            }
        });

        const productImageUpload = document.getElementById('product-image-upload');
        const productImagePreview = document.getElementById('product-image-preview');
        const cropperModal = document.getElementById('cropper-modal');
        const cropperImage = document.getElementById('cropper-image');
        const cropCancel = document.getElementById('crop-cancel');
        const cropConfirm = document.getElementById('crop-confirm');
        let cropper;
        let files = [];
        let currentFileIndex;

        productImageUpload.addEventListener('change', () => {
            productImagePreview.innerHTML = '';
            files = Array.from(productImageUpload.files);
            if (files.length > 4) {
                alert("Maximum file count is 4");
                productImageUpload.value = '';
                files = [];
                return;
            }
            if (files.length === 0) {
                alert("Minimum file count is 1");
                productImageUpload.value = '';
                files = [];
                return;
            }
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const imgElement = document.createElement('img');
                    imgElement.src = e.target.result;
                    imgElement.classList.add('preview-img');

                    const imageBox = document.createElement('div');
                    imageBox.classList.add('product-image-box');
                    imageBox.appendChild(imgElement);

                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.classList.add('delete-button');
                    deleteButton.addEventListener('click', () => {
                        files.splice(index, 1);
                        imageBox.remove();
                    });
                    imageBox.appendChild(deleteButton);

                    productImagePreview.appendChild(imageBox);

                    imgElement.addEventListener('click', () => {
                        cropperImage.src = e.target.result;
                        cropperModal.style.display = 'block';
                        cropper = new Cropper(cropperImage, {
                            aspectRatio: 1,
                            viewMode: 1,
                            movable: true,
                            zoomable: true,
                            rotatable: true,
                            scalable: true,
                        });
                        currentFileIndex = index;
                    });
                };
                reader.readAsDataURL(file);
            });
        });

        cropCancel.addEventListener('click', () => {
            cropperModal.style.display = 'none';
            cropper.destroy();
        });

        cropConfirm.addEventListener('click', () => {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob((blob) => {
                const croppedFile = new File([blob], files[currentFileIndex].name, { type: 'image/jpeg' });
                files[currentFileIndex] = croppedFile;

                const reader = new FileReader();
                reader.onload = (e) => {
                    const imgElement = productImagePreview.children[currentFileIndex].querySelector('.preview-img');
                    imgElement.src = e.target.result;
                };
                reader.readAsDataURL(croppedFile);

                cropperModal.style.display = 'none';
                cropper.destroy();
            });
        });
    </script>
</body>
</html>
